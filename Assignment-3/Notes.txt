unistd.h is not part of standard C or C++, it is UNIX implementation.
termios is the newer (now already a few decades old) Unix API for terminal I/O.

By default the keyboard starts in canonical mode - the input is read only when we press enter. But for the text editor we want
to run it in raw mode - that is the input gets read as soon as we press the keys.

Pressing Ctrl+D tells the terminal that it should register EOF from standard input.

ASCII character 0-31 and 127 are control characters. Pressing Ctrl+alphabetic_key removes the three significant bits from the 
key. The resulting value which is of 5 bits lies in the range 1-26 inclusive. So, we can mask out the lower five bits
from an alphabetic character to represent control character correspoding to it. Also, switching between lowercase and 
uppercase alphabets can be done by setting and resetting the fifth bit (0-based indexing).

We can send the terminal a four character escape sequence that tells it various text formatting to do. An escape sequence starts
with ESCAPE followed by '[' and two other chararcters. So, a normal escape sequece would be of the form of "\x1b[tt" where tt stands
for two characters. The various tasks that we can instruct the terminal to do are colouring the text, moving the cursor, clearing parts
of the screen. (Here '\x' stands for hexadecimal '1b' is hexadecimal ASCII corresponding to ESC)

Escape sequence terminal commands takes a command and also arguments. For example '\x1b[2J'
Here '\x1b[' tells that we are entering a escape sequence and J is the command to clear the screen. The argument in this 
case is 2, which tells to clear the whole screen. If we pass 1 as the argument it will clear upto cursor and 0 would clear from the 
cursor to the end of the screen. Also, 0 is the default argument, so just '\x1b[J' would also mean to clear till the end 
of the screen. We can also pass multiple arguments wherever applicable by separating the arguments with a semicolon.
Some common command are - 
    J - Clears the screen
    K - Clears the current line
    H - Reposition the cursor at a given location on the screen
    C - To move the cursor right
    B - To move the cursor down
    n - can be used to get the terminal status (with arg 6 it gives the cursor position)
    m - select graphic rendition

Using varargs - 
    In the function declaration the variable argument list is denoted by putting '...' in place of a parameter.
    There must be some explicity way for us to know the number of arguments passed (eg - additional count argument, in scanf and printf we have
            control characters)
    First use va_list (eg va_list argp) to create a variable that will point to the arguments on the stack.
    Then call va_start with the variable of type va_list and last fixed argument (eg - va_start(argp, count), assuming count was the last fixed
            argument) to initialise the variable of type va_list.
    After that call va_arg(argp, argtype) to extract the next argument of type argtype. What this does is extract sizeof(argtype) bytes
            from the location pointed by argp and then increments argp by the same size. It returns the value extracted.
    After all the arguments are extracted call va_end(argp).
The last thing to note is that most of these is implemented as macros instead of normal functions.

perror() -
    Most C library functions that fail will set the global errno variable to indicate what the error was. perror() looks at the global errno 
    variable and prints a descriptive error message for it. It also prints the string given to it before it prints the error message, which 
    is meant to provide context about what part of your code caused the error.

atexit(funp) - 
    This function takes a function pointer and calls this function when the program terminates normally.